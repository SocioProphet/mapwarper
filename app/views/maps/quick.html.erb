<% content_for :head do %>
  <script type="text/javascript">
  var addthis_share = {templates: {twitter: '{{url}} (from @<%=APP_CONFIG['addthis_twitter_user']%>)'}};
  var addthis_config = {ui_click: true};
  var fabriclayer;
  var map;
  var map_has_bounds = false;
  var map_center = null;
  var mask_geojson = null;
  var mapBaseURL = '<%= url_for maps_path %>';
  var mapbox_access_token = '<%= APP_CONFIG['mapbox_access_token'] %>';
  var geocode_result = null;
  var image_pos = null;
  <% if @map.geocode_result -%>
    geocode_result = <%= @map.geocode_result.html_safe -%>;
  <% end %>
  var mask_geojson = <%= (@map.masking.nil? || @map.masking.transformed_geojson.blank? )? 'null' : @map.masking.transformed_geojson.html_safe %>;
  <% if  @map.gcps.hard.size <= 0 && @map.soft_bounds 
    image_pos = @map.gcps.where("name LIKE 'tl%'").first.name
  %>
    map_bounds = [<%=@map.soft_bounds -%>];
    map_has_bounds = true;
    var image_pos = '<%=image_pos %>'.split(",");
  <% elsif @map.has_metadata_location? %>
    map_center = [<%= "#{@map.metadata_lon},#{@map.metadata_lat}" %>];
  <% end %>

  $(function () {

    var blayers = [ 
      new ol.layer.Tile({
        visible: false,
        type: 'base',
        title: 'Esri World Imagery',
        source: new ol.source.XYZ({
          attributions: 'Source: Esri, DigitalGlobe, GeoEye, Earthstar Geographics, CNES/Airbus DS, USDA, USGS, AeroGRID, IGN, and the GIS User Community',
          url: "https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}"
        })
      }),
      new ol.layer.Tile({ 
        title: 'OpenStreetMap',
        type: 'base',
        visible: true,
        source: new ol.source.OSM() 
      })
    ]

    if (mapbox_access_token.length > 1) {  //only add it if theres a token for it.
      blayers.unshift(
        new ol.layer.Tile({
          visible: false,
          type: 'base',
          title: 'Mapbox Satellite',
          source: new ol.source.XYZ({
            attributions: I18n['layers']['mbox_satellite_attribution'],
            url: "https://api.mapbox.com/styles/v1/mapbox/satellite-v9/tiles/256/{z}/{x}/{y}?access_token="+ mapbox_access_token
          })
        })
      )
    } 

    var base_layers = [ new ol.layer.Group({
        title: 'Base Layer',
        layers: blayers
        })
      ] ;


    map = new ol.Map({
      target: 'map',
      view: new ol.View({
        zoom: 16
      }),
      layers: base_layers
    });

    var layerSwitcher = new ol.control.LayerSwitcher({
      tipLabel: 'Layers' 
    });
    map.addControl(layerSwitcher);

    var options = {
      'image': 'myimg',
      'opacity': 0.8  
    }    
    
    if (image_pos && image_pos.length > 5){
      options = {
        'image': 'myimg',
        'opacity': 0.8,
        'scale':  parseFloat(image_pos[1]),
        'angle':  parseFloat(image_pos[2]),
        'center': [parseFloat(image_pos[3]), parseFloat(image_pos[4])]
      }
    }
    fabriclayer = new FabricLayer(options);

    map.addLayer(fabriclayer);
    fabriclayer.map = map;

    var opacity = .7;
      //set up slider
      jQuery("#slider").slider({
        value: 100 * opacity,
        range: "min",
        slide: function(e, ui) {
          fabriclayer.mapimage.setOpacity(ui.value / 100);
          fabriclayer.changed();

        }
    });

    //In decreasing order: the map has control points(hard or soft), has metadata lat/lon, an imported masking, a geocode result.
    if (map_has_bounds) {
      map.getView().fit(ol.proj.transformExtent(map_bounds, 'EPSG:4326', 'EPSG:3857'), map.getSize());

      if (image_pos && image_pos.length > 5){
        map.getView().setZoom(parseFloat(image_pos[5]))
      }else{
        map.getView().setZoom(map.getView().getZoom() - 1);
      }
    } else if (map_center){
      map.getView().setCenter(ol.proj.transform(map_center,'EPSG:4326', 'EPSG:3857' ))
      map.getView().setZoom(15)
    } else if (mask_geojson){
      var vectorSource = new ol.source.Vector({
        features: (new ol.format.GeoJSON()).readFeatures(mask_geojson)
      });
      extent = vectorSource.getExtent();
      map.getView().fit(extent, map.getSize()); 
    } else if (geocode_result){
      zoomToGeocode(geocode_result)
    } else {
      map.getView().setCenter(ol.proj.transform([0,0],'EPSG:4326', 'EPSG:3857' ));
      map.getView().setZoom(3)
    }



  jQuery( "#skipQuickButton" ).click(function() {
    console.log("skip")
  });
  jQuery( "#submitQuickButton" ).click(function() {
    sendCoords();
  });


  });  

  function getImageCoords(){
    var coords =  fabriclayer.mapimage.oCoords;

    var topLeft     = map.getCoordinateFromPixel([coords.tl.x, coords.tl.y]);
    var topRight    = map.getCoordinateFromPixel([coords.tr.x, coords.tr.y]);
    var bottomLeft  = map.getCoordinateFromPixel([coords.bl.x, coords.bl.y]);
    var bottomRight = map.getCoordinateFromPixel([coords.br.x, coords.br.y]);
    controlPointsMerc = [topLeft, topRight, bottomLeft, bottomRight ]

    controlPoints = []
    controlPointsMerc.forEach(function (point, i){
      controlPoints.push(ol.proj.transform(point,'EPSG:3857' , 'EPSG:4326'));
    });

    return controlPoints;
  }

  function sendCoords(){
    var imageCoords  = getImageCoords();
    var scale = fabriclayer.mapimage.getScaleX();
    var angle = fabriclayer.mapimage.getAngle();
    var center = map.getCoordinateFromPixel([fabriclayer.mapimage.getCenterPoint().x, fabriclayer.mapimage.getCenterPoint().y]);
    var zoom = map.getView().getZoom();
    var coords  = [];
    coords.push({'corner': ['tl',scale,angle,center,zoom].join(), 'lon': imageCoords[0][0], 'lat':imageCoords[0][1]})
    coords.push({'corner': 'tr', 'lon': imageCoords[1][0], 'lat':imageCoords[1][1]})
    coords.push({'corner': 'bl', 'lon': imageCoords[2][0], 'lat':imageCoords[2][1]})
    coords.push({'corner': 'br', 'lon': imageCoords[3][0], 'lat':imageCoords[3][1]})
       
    var token = jQuery( 'meta[name="csrf-token"]' ).attr( 'content' );
    jQuery.ajaxSetup( {
      beforeSend: function ( xhr ) {
        xhr.setRequestHeader( 'X-CSRF-Token', token );
      }
    });  

    jQuery.ajax({
      method: "POST",
      url: '<%= add_corner_coords_path(@map,format: "json") %>',
      data: { coords : JSON.stringify(coords) },
      dataType: 'json'
      }).done(function(resp) {
        window.location.href = '<%= maps_path(origin: 'quick') %>';
      }).fail(function(resp) {
        failMessage(resp);
      });
  }

  function doPlaceSearch(place){
    var options = { 
      'place': place,
      'format': 'json'
    };

    jQuery.ajax({url: mapBaseURL+'/geosearch', data: options})
    .done(function(resp) {
      doPlaceZoom(resp);
    })
    .fail(function(resp) {
      failMessage(resp);
    })
  }
  
  function doPlaceZoom(extent){
    var extent_a = extent.map(Number)
    var mercExtent =  ol.proj.transformExtent(extent_a, 'EPSG:4326', 'EPSG:3857');
    map.getView().fit(mercExtent, map.getSize());
  }
  function failMessage(resp){
    alert(I18n["quick"]["fail"]);
  }

  function zoomToGeocode(res){
    if (res.results && res.results.length > 0){

      var bounds = []
      var viewport = res.results[0].geometry.viewport;
      var first_bounds = [viewport.northeast.lng, viewport.northeast.lat, viewport.southwest.lng, viewport.southwest.lat]
      if (res.results.length > 1){
        var vp = res.results[1].geometry.viewport;
        bounds = ol.extent.extend(first_bounds, [vp.northeast.lng, vp.northeast.lat, vp.southwest.lng, vp.southwest.lat])
      } else {
        bounds = first_bounds;
      }

      var mercExtent =  ol.proj.transformExtent(bounds, 'EPSG:4326', 'EPSG:3857');

      map.getView().fit(mercExtent, map.getSize());
    }
  }


  </script>

  <style>
    #slider {
      bottom:50px;
      margin-left:auto;
      margin-right:auto;
      width:25em;
      z-index:1500;
    }
    .imgcontainter {
      overflow: hidden;
      position: relative;
    }
    .images {
      position: absolute;
      height: 100px;
      width: 100px;
      right: -50px;
      top: 50px;
    }
  </style>
  <%= javascript_include_tag "fabric.min.js" %>
  <%= javascript_include_tag "fabriclayer.js" %>
<% end %> 

<table id="map_table" class="">
  <%= render :partial => 'maps/map_detail', :object => @map, :locals => {:variety => "quick"} %>
</table>

<h2><%= t('.heading')%></h2>
<p><%= t('.intro')%></p>

<div id="map" class="quick-map">
  <div id="address-search" class="">
    <label><input type="search" name="placesearch" size="35" placeholder="e.g. Driggs Avenue Williamsburg" onchange="doPlaceSearch(this.value);">&nbsp;<%= t('.find')%></label>
  </div>
</div>
<div id="slider"></div>
<div class="quickButtons">
 <!-- <a class="buttonWarper skipButton" id="skipQuickButton"><%= t('.skip_button')%></a> -->
  <a class="buttonWarper quickButton" id="submitQuickButton"><%= t('.submit_button')%></a>
</div>


<div class="imgcontainter">
  <div class="images">
    <% 
      img_width,  img_height   =   @map.calc_rezize_image(2000)
      thumb_width, thumb_height =  @map.calc_rezize_image(400)   

      image_url = wms_map_path(@map)  + "?SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&FORMAT=image/jpeg&TRANSPARENT=true&STATUS=unwarped&SRS=epsg:4326&CRS=EPSG:32663&STYLES=&WIDTH=#{img_width}&HEIGHT=#{img_height}&BBOX=0,0,#{@map.width},#{@map.height}.jpg"
    %>

    <%= image_tag(image_url,  width: thumb_width, height: thumb_height, id:"myimg",  rel: "preload", alt: "image for quick interface") %>
  </div>
</div>

